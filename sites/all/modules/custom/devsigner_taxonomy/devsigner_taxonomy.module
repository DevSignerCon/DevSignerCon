<?php
/**
 * @file
 * Module for the handling taxonomy output for entityforms.
 */

/**
 * Add additional view modes to entities.
 */
function devsigner_taxonomy_entity_info_alter(&$entity_info) {
  // Add teaser for entity forms.
  $entity_info['entityform']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
  );

  // Add taxonomy for users.
  $entity_info['user']['view modes']['taxonomy'] = array(
    'label' => t('Taxonomy'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_menu_alter().
 */
function devsigner_taxonomy_menu_alter(&$items) {
  $items['taxonomy/term/%taxonomy_term']['page callback'] = 'devsigner_taxonomy_term_page';
}

/**
 * Menu callback; displays all nodes associated with a term.
 *
 * @param $term
 *   The taxonomy term.
 * @return
 *   The page content.
 */
function devsigner_taxonomy_term_page($term) {
  // If there is a menu link to this term, the link becomes the last part of
  // the active trail, and the link name becomes the page title. Thus, we must
  // explicitly set the page title to be the term title.
  drupal_set_title($term->name);

  // Build breadcrumb based on the hierarchy of the term.
  $current = (object) array(
    'tid' => $term->tid,
  );
  // @todo This overrides any other possible breadcrumb and is a pure hard-coded
  //   presumption. Make this behavior configurable per vocabulary or term.
  $breadcrumb = array();
  while ($parents = taxonomy_get_parents($current->tid)) {
    $current = array_shift($parents);
    $breadcrumb[] = l($current->name, 'taxonomy/term/' . $current->tid);
  }
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb = array_reverse($breadcrumb);
  drupal_set_breadcrumb($breadcrumb);
  drupal_add_feed('taxonomy/term/' . $term->tid . '/feed', 'RSS - ' . $term->name);

  // Set the term path as the canonical URL to prevent duplicate content.
  $uri = entity_uri('taxonomy_term', $term);
  drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
  // Set the non-aliased path as a default shortlink.
  drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);

  // Normally we would call taxonomy_term_show() here, but for backwards
  // compatibility in Drupal 7 we do not want to do that (it produces different
  // data structures and HTML markup than what Drupal 7 released with). Calling
  // taxonomy_term_view() directly provides essentially the same thing, but
  // allows us to wrap the rendered term in our desired array structure.
  $build['term_heading'] = array(
    '#prefix' => '<div class="term-listing-heading">',
    '#suffix' => '</div>',
    'term' => taxonomy_term_view($term, 'full'),
  );

  if ($nids = taxonomy_select_nodes($term->tid, TRUE, variable_get('default_nodes_main', 10))) {
    $nodes = node_load_multiple($nids);
    $build += node_view_multiple($nodes);

    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
  }
  elseif ($entity_ids = devsigner_taxonomy_select_entities($term->tid, FALSE)) {
    $entities = entity_load('entityform', $entity_ids);

    // Handle access control manually.
    foreach ($entities as $key => $entity) {
      if (!entityform_access('view', $entity)) {
        unset($entities[$key]);
      }
    }

    $build += entity_view('entityform', $entities, 'teaser');

    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
  }
  else {
    $build['no_content'] = array(
      '#prefix' => '<p>',
      '#markup' => t('There is currently no content classified with this term.'),
      '#suffix' => '</p>',
    );
  }
  return $build;
}

/**
 * Return entities attached to a term across all field instances.
 *
 * This function requires taxonomy entity index module to be maintaining its
 * own tables, and will return an empty array if it is not.
 *
 * @param $tid
 *   The term ID.
 * @param $order
 *   An array of fields and directions.
 *
 * @return
 *   An array of entity ids matching the query.
 */
function devsigner_taxonomy_select_entities($tid, $order = array('t.delta' => 'ASC', 't.entity_id' => 'ASC')) {
  if (module_exists('taxonomy_entity_index') !== TRUE) {
    return array();
  }
  $query = db_select('taxonomy_entity_index', 't');
  $query->condition('tid', $tid);
  $query->addField('t', 'entity_id');
  $query->addField('t', 'tid');
  foreach ($order as $field => $direction) {
    $query->orderBy($field, $direction);
    // ORDER BY fields need to be loaded too, assume they are in the form
    // table_alias.name
    list($table_alias, $name) = explode('.', $field);
    $query->addField($table_alias, $name);
  }
  return $query->execute()->fetchCol();
}
